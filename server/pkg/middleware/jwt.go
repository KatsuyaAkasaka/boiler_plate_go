package middleware

import (
	"strings"
	"time"

	e "github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/adapter/error"
	log "github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/adapter/logger"
	"github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/domain/entity"
	"github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/domain/repository"
	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
)

const (
	//AdminSecret は、JWT生成時のソルト値です
	// generated by openssl rand -base64 40
	secret        = "2lLcIfyC2/5DZ39wqEKobpYA0CgEXo5d4/wvhvAqIQZO5i2MAaCvaw=="
	ExpiredPeriod = time.Hour * 24 * 7
	AuthPeriod    = time.Minute * 10

	Exp JwtParam = iota + 1
	UUID
	Email
)

type JWT struct {
	userRepo repository.UserRepository
}

func NewJWT(repos *repository.Repositories) *JWT {
	return &JWT{
		userRepo: repos.User,
	}
}

type JwtParam int

func GetJWTParam(i JwtParam) string {
	switch i {
	case Exp:
		return "exp"
	case UUID:
		return "uuid"
	case Email:
		return "email"
	default:
		return ""
	}
}

func GenerateUUIDJWT(uuid *entity.UUID) (string, e.Err) {
	// Create token
	token := jwt.New(jwt.SigningMethodHS256)
	// Set claims
	claims := token.Claims.(jwt.MapClaims)
	claims[GetJWTParam(UUID)] = uuid
	claims[GetJWTParam(Exp)] = time.Now().Add(ExpiredPeriod).Unix()

	// Generate encoded token and send it as response.
	t, er := token.SignedString([]byte(secret))
	if er != nil {
		return "", e.System.TokenInvalid
	}

	return t, nil
}

func GenerateEmailJWT(email *entity.Email) (string, e.Err) {
	// Create token
	token := jwt.New(jwt.SigningMethodHS256)
	// Set claims
	claims := token.Claims.(jwt.MapClaims)
	claims[GetJWTParam(Email)] = email
	claims[GetJWTParam(Exp)] = time.Now().Add(AuthPeriod).Unix()

	// Generate encoded token and send it as response.
	t, er := token.SignedString([]byte(secret))
	if er != nil {
		return "", e.System.TokenInvalid
	}

	return t, nil
}

func ParseJWT(authHeader string, requiredParseParams ...JwtParam) (*entity.UUID, *entity.Email, int64, e.Err) {
	signedString := strings.Replace(authHeader, "Bearer ", "", 1)
	token, err := jwt.Parse(signedString, func(token *jwt.Token) (interface{}, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return "", e.GetErr(e.System.TokenInvalid)
		}
		return []byte(secret), nil
	})

	if err != nil {
		log.Error(err)
		return nil, nil, 0, e.System.TokenInvalid
	}

	if token == nil {
		log.Error(err)
		return nil, nil, 0, e.System.TokenInvalid
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		log.Error("token invalid")
		return nil, nil, 0, e.System.TokenInvalid
	}

	var eerr e.Err = nil
	var uuid *entity.UUID = nil
	var email *entity.Email = nil
	var exp int64
	for _, v := range requiredParseParams {
		key := GetJWTParam(v)
		var valStr string
		var valInt int64
		var valFloat float64
		var ok bool
		if key == "" {
			eerr = e.System.Unexported
			break
		}
		if key == GetJWTParam(Exp) {
			valFloat, ok = claims[key].(float64)
			valInt = int64(int(valFloat))
		} else {
			valStr, ok = claims[key].(string)
		}
		if !ok {
			eerr = e.System.TokenInvalid
			break
		}

		if v == Exp {
			exp = valInt
			if entity.IsExpired(valInt) {
				eerr = e.System.SessionExpired
				break
			}
		} else if v == UUID {
			uuid, eerr = entity.GetUUID(valStr)
			if eerr != nil {
				break
			}
		} else if v == Email {
			email, eerr = entity.GetUserEmail(valStr)
			if eerr != nil {
				break
			}
		}
	}
	if eerr != nil {
		return nil, nil, exp, eerr
	}

	return uuid, email, exp, nil
}

func SetToContext(c *gin.Context, param JwtParam) (*entity.UUID, e.Err) {
	authHeader := c.GetHeader("Authorization")
	if authHeader == "" {
		return nil, e.System.LoginRequired
	}
	// Exp by default
	if param == Email {
		_, email, exp, err := ParseJWT(authHeader, Email, Exp)
		if err != nil {
			return nil, err
		}

		c.Set(GetJWTParam(Email), email.ToStr())
		c.Set(GetJWTParam(Exp), exp)
		return nil, nil

	} else if param == UUID {
		uuid, _, exp, err := ParseJWT(authHeader, UUID, Exp)
		if err != nil {
			return nil, err
		}

		c.Set(GetJWTParam(UUID), uuid.ToStr())
		c.Set(GetJWTParam(Exp), exp)
		return uuid, nil
	}
	return nil, nil
}

func (jwt JWT) UUIDHandlerNotErrFunc() gin.HandlerFunc {
	return func(c *gin.Context) {
		SetToContext(c, UUID)
		c.Next()
	}
}

func (jwt JWT) UUIDHandlerFunc() gin.HandlerFunc {
	return func(c *gin.Context) {
		uuid, err := SetToContext(c, UUID)
		if err != nil || uuid == nil {
			c.JSON(err.HttpStatusCode, gin.H{"error": err.ErrCode})
			c.Abort()
			return
		}
		_, err = jwt.userRepo.FindByUUID(uuid)
		if err != nil {
			c.JSON(err.HttpStatusCode, gin.H{"error": err.ErrCode})
			c.Abort()
			return
		}
		c.Next()
	}
}

func (jwt JWT) EmailHandlerFunc() gin.HandlerFunc {
	return func(c *gin.Context) {
		_, err := SetToContext(c, Email)
		if err != nil {
			c.JSON(err.HttpStatusCode, gin.H{"error": err.ErrCode})
			c.Abort()
			return
		}
		c.Next()
	}
}
