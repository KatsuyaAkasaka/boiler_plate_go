// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/domain/repository/user.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/domain/entity"
	e "github.com/KatsuyaAkasaka/boiler_plate_go/server/pkg/error"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserRepository) Create(model *entity.User) (*entity.User, e.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Err)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryMockRecorder) Create(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), model)
}

// FindByUserID mocks base method
func (m *MockUserRepository) FindByUserID(id entity.UserID) (*entity.User, e.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Err)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID
func (mr *MockUserRepositoryMockRecorder) FindByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindByUserID), id)
}

// Update mocks base method
func (m *MockUserRepository) Update(model *entity.User) (*entity.User, e.Err) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", model)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Err)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryMockRecorder) Update(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), model)
}

// Delete mocks base method
func (m *MockUserRepository) Delete(id entity.UserID) e.Err {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(e.Err)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), id)
}
